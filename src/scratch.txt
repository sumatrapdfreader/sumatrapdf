static void ClearPixmap(fz_pixmap* pixmap) {
    auto stride = pixmap->stride;
    size_t dx = (size_t)pixmap->w;
    size_t dy = (size_t)pixmap->h;
    u8* samples = pixmap->samples;
    CrashIf(pixmap->n != 3);
    for (size_t y = 0; y < dy; y++) {
        u8* d = samples + (stride * y);
        for (size_t x = 0; x < dx; x++) {
            d[0] = 255;
            d[1] = 0;
            d[2] = 0;
            d += pixmap->n;
            if (false) {
                if (x % 2 == 0) {
                    *d++ = 255;
                    *d++ = 0;
                    *d++ = 0;
                } else {
                    *d++ = 0;
                    *d++ = 0;
                    *d++ = 255;
                }
            }
        }
    }
}

------------------------------------------------------------------

// Select random files to test. We want to test each file type equally, so
// we first group them by file extension and then select up to maxPerType
// for each extension, randomly, and inter-leave the files with different
// extensions, so their testing is evenly distributed.
// Returns result in <files>.
static void RandomizeFiles(StrVec& files, int maxPerType) {
    StrVec fileExts;
    Vec<StrVec*> filesPerType;

    for (int i = 0; i < files.Size(); i++) {
        char* file = files.at(i);
        char* ext = path::GetExtTemp(file);
        CrashAlwaysIf(!ext);
        int typeNo = fileExts.FindI(ext);
        if (-1 == typeNo) {
            fileExts.Append(ext);
            filesPerType.Append(new StrVec());
            typeNo = filesPerType.Size() - 1;
        }
        filesPerType.at(typeNo)->Append(file);
    }

    for (size_t j = 0; j < filesPerType.size(); j++) {
        StrVec* all = filesPerType.at(j);
        StrVec* random = new StrVec();

        for (int n = 0; n < maxPerType && all->Size() > 0; n++) {
            int idx = rand() % all->Size();
            char* file = all->at(idx);
            random->Append(file);
            all->RemoveAt(idx);
        }

        filesPerType.at(j) = random;
        delete all;
    }

    files.Reset();

    bool gotAll = false;
    while (!gotAll) {
        gotAll = true;
        for (size_t j = 0; j < filesPerType.size(); j++) {
            StrVec* random = filesPerType.at(j);
            if (random->Size() > 0) {
                gotAll = false;
                char* file = random->at(0);
                files.Append(file);
                random->RemoveAt(0);
            }
        }
    }

    for (size_t j = 0; j < filesPerType.size(); j++) {
        delete filesPerType.at(j);
    }
}

------------------------------------------------------------------

StrVec2 ideas:
- store size of strings as u32 in the index to support storing zero-terminated strings, add tests
- optimize for SetAt(): when removing last string from a page, free its memory (update currEnd)

-- implement StrVec2::InsertAt()

bool StrVecPage::InsertAt() that inserts if has space.

If no space, call CompactPages() with additional argument for additinal space
then call StrVecPage::InsertAt() which must succeed.

------------------------------------------------------------------


------------------------------------------------------------------
